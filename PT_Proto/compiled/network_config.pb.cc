// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "network_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* network_config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  network_config_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_network_5fconfig_2eproto() {
  protobuf_AddDesc_network_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "network_config.proto");
  GOOGLE_CHECK(file != NULL);
  network_config_descriptor_ = file->message_type(0);
  static const int network_config_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(network_config, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(network_config, number_of_conn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(network_config, keep_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(network_config, is_enable_cache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(network_config, cache_count_),
  };
  network_config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      network_config_descriptor_,
      network_config::default_instance_,
      network_config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(network_config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(network_config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(network_config));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_network_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    network_config_descriptor_, &network_config::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_network_5fconfig_2eproto() {
  delete network_config::default_instance_;
  delete network_config_reflection_;
}

void protobuf_AddDesc_network_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024network_config.proto\"w\n\016network_config"
    "\022\014\n\004port\030\001 \002(\005\022\026\n\016number_of_conn\030\002 \002(\005\022\021"
    "\n\tkeep_time\030\003 \002(\005\022\027\n\017is_enable_cache\030\004 \002"
    "(\010\022\023\n\013cache_count\030\005 \002(\005", 143);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "network_config.proto", &protobuf_RegisterTypes);
  network_config::default_instance_ = new network_config();
  network_config::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_network_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_network_5fconfig_2eproto {
  StaticDescriptorInitializer_network_5fconfig_2eproto() {
    protobuf_AddDesc_network_5fconfig_2eproto();
  }
} static_descriptor_initializer_network_5fconfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int network_config::kPortFieldNumber;
const int network_config::kNumberOfConnFieldNumber;
const int network_config::kKeepTimeFieldNumber;
const int network_config::kIsEnableCacheFieldNumber;
const int network_config::kCacheCountFieldNumber;
#endif  // !_MSC_VER

network_config::network_config()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network_config)
}

void network_config::InitAsDefaultInstance() {
}

network_config::network_config(const network_config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network_config)
}

void network_config::SharedCtor() {
  _cached_size_ = 0;
  port_ = 0;
  number_of_conn_ = 0;
  keep_time_ = 0;
  is_enable_cache_ = false;
  cache_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

network_config::~network_config() {
  // @@protoc_insertion_point(destructor:network_config)
  SharedDtor();
}

void network_config::SharedDtor() {
  if (this != default_instance_) {
  }
}

void network_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* network_config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return network_config_descriptor_;
}

const network_config& network_config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_5fconfig_2eproto();
  return *default_instance_;
}

network_config* network_config::default_instance_ = NULL;

network_config* network_config::New() const {
  return new network_config;
}

void network_config::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<network_config*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(port_, cache_count_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool network_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 port = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_number_of_conn;
        break;
      }

      // required int32 number_of_conn = 2;
      case 2: {
        if (tag == 16) {
         parse_number_of_conn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_of_conn_)));
          set_has_number_of_conn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_keep_time;
        break;
      }

      // required int32 keep_time = 3;
      case 3: {
        if (tag == 24) {
         parse_keep_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keep_time_)));
          set_has_keep_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_enable_cache;
        break;
      }

      // required bool is_enable_cache = 4;
      case 4: {
        if (tag == 32) {
         parse_is_enable_cache:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_enable_cache_)));
          set_has_is_enable_cache();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cache_count;
        break;
      }

      // required int32 cache_count = 5;
      case 5: {
        if (tag == 40) {
         parse_cache_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cache_count_)));
          set_has_cache_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network_config)
  return false;
#undef DO_
}

void network_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network_config)
  // required int32 port = 1;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->port(), output);
  }

  // required int32 number_of_conn = 2;
  if (has_number_of_conn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->number_of_conn(), output);
  }

  // required int32 keep_time = 3;
  if (has_keep_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->keep_time(), output);
  }

  // required bool is_enable_cache = 4;
  if (has_is_enable_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_enable_cache(), output);
  }

  // required int32 cache_count = 5;
  if (has_cache_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cache_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:network_config)
}

::google::protobuf::uint8* network_config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network_config)
  // required int32 port = 1;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->port(), target);
  }

  // required int32 number_of_conn = 2;
  if (has_number_of_conn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->number_of_conn(), target);
  }

  // required int32 keep_time = 3;
  if (has_keep_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->keep_time(), target);
  }

  // required bool is_enable_cache = 4;
  if (has_is_enable_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_enable_cache(), target);
  }

  // required int32 cache_count = 5;
  if (has_cache_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cache_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network_config)
  return target;
}

int network_config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 port = 1;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // required int32 number_of_conn = 2;
    if (has_number_of_conn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number_of_conn());
    }

    // required int32 keep_time = 3;
    if (has_keep_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keep_time());
    }

    // required bool is_enable_cache = 4;
    if (has_is_enable_cache()) {
      total_size += 1 + 1;
    }

    // required int32 cache_count = 5;
    if (has_cache_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cache_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void network_config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const network_config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const network_config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void network_config::MergeFrom(const network_config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_number_of_conn()) {
      set_number_of_conn(from.number_of_conn());
    }
    if (from.has_keep_time()) {
      set_keep_time(from.keep_time());
    }
    if (from.has_is_enable_cache()) {
      set_is_enable_cache(from.is_enable_cache());
    }
    if (from.has_cache_count()) {
      set_cache_count(from.cache_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void network_config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void network_config::CopyFrom(const network_config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool network_config::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void network_config::Swap(network_config* other) {
  if (other != this) {
    std::swap(port_, other->port_);
    std::swap(number_of_conn_, other->number_of_conn_);
    std::swap(keep_time_, other->keep_time_);
    std::swap(is_enable_cache_, other->is_enable_cache_);
    std::swap(cache_count_, other->cache_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata network_config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = network_config_descriptor_;
  metadata.reflection = network_config_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
