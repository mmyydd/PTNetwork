// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_query.proto

#ifndef PROTOBUF_db_5fquery_2eproto__INCLUDED
#define PROTOBUF_db_5fquery_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_db_5fquery_2eproto();
void protobuf_AssignDesc_db_5fquery_2eproto();
void protobuf_ShutdownFile_db_5fquery_2eproto();

class db_query_param;
class db_query;
class db_field;
class db_fields;
class db_row_value;
class db_row;
class db_rows;
class db_error;
class db_query_result;

// ===================================================================

class db_query_param : public ::google::protobuf::Message {
 public:
  db_query_param();
  virtual ~db_query_param();

  db_query_param(const db_query_param& from);

  inline db_query_param& operator=(const db_query_param& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_param& default_instance();

  void Swap(db_query_param* other);

  // implements Message ----------------------------------------------

  db_query_param* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_param& from);
  void MergeFrom(const db_query_param& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 param_type = 1;
  inline bool has_param_type() const;
  inline void clear_param_type();
  static const int kParamTypeFieldNumber = 1;
  inline ::google::protobuf::int32 param_type() const;
  inline void set_param_type(::google::protobuf::int32 value);

  // required bytes values = 2;
  inline bool has_values() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 2;
  inline const ::std::string& values() const;
  inline void set_values(const ::std::string& value);
  inline void set_values(const char* value);
  inline void set_values(const void* value, size_t size);
  inline ::std::string* mutable_values();
  inline ::std::string* release_values();
  inline void set_allocated_values(::std::string* values);

  // @@protoc_insertion_point(class_scope:db_query_param)
 private:
  inline void set_has_param_type();
  inline void clear_has_param_type();
  inline void set_has_values();
  inline void clear_has_values();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* values_;
  ::google::protobuf::int32 param_type_;
  friend void  protobuf_AddDesc_db_5fquery_2eproto();
  friend void protobuf_AssignDesc_db_5fquery_2eproto();
  friend void protobuf_ShutdownFile_db_5fquery_2eproto();

  void InitAsDefaultInstance();
  static db_query_param* default_instance_;
};
// -------------------------------------------------------------------

class db_query : public ::google::protobuf::Message {
 public:
  db_query();
  virtual ~db_query();

  db_query(const db_query& from);

  inline db_query& operator=(const db_query& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query& default_instance();

  void Swap(db_query* other);

  // implements Message ----------------------------------------------

  db_query* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query& from);
  void MergeFrom(const db_query& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string conn = 1;
  inline bool has_conn() const;
  inline void clear_conn();
  static const int kConnFieldNumber = 1;
  inline const ::std::string& conn() const;
  inline void set_conn(const ::std::string& value);
  inline void set_conn(const char* value);
  inline void set_conn(const char* value, size_t size);
  inline ::std::string* mutable_conn();
  inline ::std::string* release_conn();
  inline void set_allocated_conn(::std::string* conn);

  // required string query = 2;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 2;
  inline const ::std::string& query() const;
  inline void set_query(const ::std::string& value);
  inline void set_query(const char* value);
  inline void set_query(const char* value, size_t size);
  inline ::std::string* mutable_query();
  inline ::std::string* release_query();
  inline void set_allocated_query(::std::string* query);

  // repeated .db_query_param params = 3;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 3;
  inline const ::db_query_param& params(int index) const;
  inline ::db_query_param* mutable_params(int index);
  inline ::db_query_param* add_params();
  inline const ::google::protobuf::RepeatedPtrField< ::db_query_param >&
      params() const;
  inline ::google::protobuf::RepeatedPtrField< ::db_query_param >*
      mutable_params();

  // @@protoc_insertion_point(class_scope:db_query)
 private:
  inline void set_has_conn();
  inline void clear_has_conn();
  inline void set_has_query();
  inline void clear_has_query();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* conn_;
  ::std::string* query_;
  ::google::protobuf::RepeatedPtrField< ::db_query_param > params_;
  friend void  protobuf_AddDesc_db_5fquery_2eproto();
  friend void protobuf_AssignDesc_db_5fquery_2eproto();
  friend void protobuf_ShutdownFile_db_5fquery_2eproto();

  void InitAsDefaultInstance();
  static db_query* default_instance_;
};
// -------------------------------------------------------------------

class db_field : public ::google::protobuf::Message {
 public:
  db_field();
  virtual ~db_field();

  db_field(const db_field& from);

  inline db_field& operator=(const db_field& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_field& default_instance();

  void Swap(db_field* other);

  // implements Message ----------------------------------------------

  db_field* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_field& from);
  void MergeFrom(const db_field& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db_field)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_db_5fquery_2eproto();
  friend void protobuf_AssignDesc_db_5fquery_2eproto();
  friend void protobuf_ShutdownFile_db_5fquery_2eproto();

  void InitAsDefaultInstance();
  static db_field* default_instance_;
};
// -------------------------------------------------------------------

class db_fields : public ::google::protobuf::Message {
 public:
  db_fields();
  virtual ~db_fields();

  db_fields(const db_fields& from);

  inline db_fields& operator=(const db_fields& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_fields& default_instance();

  void Swap(db_fields* other);

  // implements Message ----------------------------------------------

  db_fields* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_fields& from);
  void MergeFrom(const db_fields& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .db_field fields = 1;
  inline int fields_size() const;
  inline void clear_fields();
  static const int kFieldsFieldNumber = 1;
  inline const ::db_field& fields(int index) const;
  inline ::db_field* mutable_fields(int index);
  inline ::db_field* add_fields();
  inline const ::google::protobuf::RepeatedPtrField< ::db_field >&
      fields() const;
  inline ::google::protobuf::RepeatedPtrField< ::db_field >*
      mutable_fields();

  // @@protoc_insertion_point(class_scope:db_fields)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::db_field > fields_;
  friend void  protobuf_AddDesc_db_5fquery_2eproto();
  friend void protobuf_AssignDesc_db_5fquery_2eproto();
  friend void protobuf_ShutdownFile_db_5fquery_2eproto();

  void InitAsDefaultInstance();
  static db_fields* default_instance_;
};
// -------------------------------------------------------------------

class db_row_value : public ::google::protobuf::Message {
 public:
  db_row_value();
  virtual ~db_row_value();

  db_row_value(const db_row_value& from);

  inline db_row_value& operator=(const db_row_value& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_row_value& default_instance();

  void Swap(db_row_value* other);

  // implements Message ----------------------------------------------

  db_row_value* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_row_value& from);
  void MergeFrom(const db_row_value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // required bool is_null = 2 [default = false];
  inline bool has_is_null() const;
  inline void clear_is_null();
  static const int kIsNullFieldNumber = 2;
  inline bool is_null() const;
  inline void set_is_null(bool value);

  // required bool is_unsigned = 3 [default = false];
  inline bool has_is_unsigned() const;
  inline void clear_is_unsigned();
  static const int kIsUnsignedFieldNumber = 3;
  inline bool is_unsigned() const;
  inline void set_is_unsigned(bool value);

  // @@protoc_insertion_point(class_scope:db_row_value)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_is_null();
  inline void clear_has_is_null();
  inline void set_has_is_unsigned();
  inline void clear_has_is_unsigned();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* value_;
  bool is_null_;
  bool is_unsigned_;
  friend void  protobuf_AddDesc_db_5fquery_2eproto();
  friend void protobuf_AssignDesc_db_5fquery_2eproto();
  friend void protobuf_ShutdownFile_db_5fquery_2eproto();

  void InitAsDefaultInstance();
  static db_row_value* default_instance_;
};
// -------------------------------------------------------------------

class db_row : public ::google::protobuf::Message {
 public:
  db_row();
  virtual ~db_row();

  db_row(const db_row& from);

  inline db_row& operator=(const db_row& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_row& default_instance();

  void Swap(db_row* other);

  // implements Message ----------------------------------------------

  db_row* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_row& from);
  void MergeFrom(const db_row& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .db_row_value column = 1;
  inline int column_size() const;
  inline void clear_column();
  static const int kColumnFieldNumber = 1;
  inline const ::db_row_value& column(int index) const;
  inline ::db_row_value* mutable_column(int index);
  inline ::db_row_value* add_column();
  inline const ::google::protobuf::RepeatedPtrField< ::db_row_value >&
      column() const;
  inline ::google::protobuf::RepeatedPtrField< ::db_row_value >*
      mutable_column();

  // @@protoc_insertion_point(class_scope:db_row)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::db_row_value > column_;
  friend void  protobuf_AddDesc_db_5fquery_2eproto();
  friend void protobuf_AssignDesc_db_5fquery_2eproto();
  friend void protobuf_ShutdownFile_db_5fquery_2eproto();

  void InitAsDefaultInstance();
  static db_row* default_instance_;
};
// -------------------------------------------------------------------

class db_rows : public ::google::protobuf::Message {
 public:
  db_rows();
  virtual ~db_rows();

  db_rows(const db_rows& from);

  inline db_rows& operator=(const db_rows& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_rows& default_instance();

  void Swap(db_rows* other);

  // implements Message ----------------------------------------------

  db_rows* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_rows& from);
  void MergeFrom(const db_rows& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .db_row rows = 1;
  inline int rows_size() const;
  inline void clear_rows();
  static const int kRowsFieldNumber = 1;
  inline const ::db_row& rows(int index) const;
  inline ::db_row* mutable_rows(int index);
  inline ::db_row* add_rows();
  inline const ::google::protobuf::RepeatedPtrField< ::db_row >&
      rows() const;
  inline ::google::protobuf::RepeatedPtrField< ::db_row >*
      mutable_rows();

  // @@protoc_insertion_point(class_scope:db_rows)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::db_row > rows_;
  friend void  protobuf_AddDesc_db_5fquery_2eproto();
  friend void protobuf_AssignDesc_db_5fquery_2eproto();
  friend void protobuf_ShutdownFile_db_5fquery_2eproto();

  void InitAsDefaultInstance();
  static db_rows* default_instance_;
};
// -------------------------------------------------------------------

class db_error : public ::google::protobuf::Message {
 public:
  db_error();
  virtual ~db_error();

  db_error(const db_error& from);

  inline db_error& operator=(const db_error& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_error& default_instance();

  void Swap(db_error* other);

  // implements Message ----------------------------------------------

  db_error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_error& from);
  void MergeFrom(const db_error& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_mysql_error = 1;
  inline bool has_is_mysql_error() const;
  inline void clear_is_mysql_error();
  static const int kIsMysqlErrorFieldNumber = 1;
  inline bool is_mysql_error() const;
  inline void set_is_mysql_error(bool value);

  // required int32 error_code = 2;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // required string reason = 3;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 3;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // @@protoc_insertion_point(class_scope:db_error)
 private:
  inline void set_has_is_mysql_error();
  inline void clear_has_is_mysql_error();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool is_mysql_error_;
  ::google::protobuf::int32 error_code_;
  ::std::string* reason_;
  friend void  protobuf_AddDesc_db_5fquery_2eproto();
  friend void protobuf_AssignDesc_db_5fquery_2eproto();
  friend void protobuf_ShutdownFile_db_5fquery_2eproto();

  void InitAsDefaultInstance();
  static db_error* default_instance_;
};
// -------------------------------------------------------------------

class db_query_result : public ::google::protobuf::Message {
 public:
  db_query_result();
  virtual ~db_query_result();

  db_query_result(const db_query_result& from);

  inline db_query_result& operator=(const db_query_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_result& default_instance();

  void Swap(db_query_result* other);

  // implements Message ----------------------------------------------

  db_query_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_result& from);
  void MergeFrom(const db_query_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .db_fields fields = 1;
  inline bool has_fields() const;
  inline void clear_fields();
  static const int kFieldsFieldNumber = 1;
  inline const ::db_fields& fields() const;
  inline ::db_fields* mutable_fields();
  inline ::db_fields* release_fields();
  inline void set_allocated_fields(::db_fields* fields);

  // optional uint64 affected_rows = 2;
  inline bool has_affected_rows() const;
  inline void clear_affected_rows();
  static const int kAffectedRowsFieldNumber = 2;
  inline ::google::protobuf::uint64 affected_rows() const;
  inline void set_affected_rows(::google::protobuf::uint64 value);

  // optional .db_rows rows = 3;
  inline bool has_rows() const;
  inline void clear_rows();
  static const int kRowsFieldNumber = 3;
  inline const ::db_rows& rows() const;
  inline ::db_rows* mutable_rows();
  inline ::db_rows* release_rows();
  inline void set_allocated_rows(::db_rows* rows);

  // required bool success = 4;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 4;
  inline bool success() const;
  inline void set_success(bool value);

  // optional .db_error error = 5;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 5;
  inline const ::db_error& error() const;
  inline ::db_error* mutable_error();
  inline ::db_error* release_error();
  inline void set_allocated_error(::db_error* error);

  // @@protoc_insertion_point(class_scope:db_query_result)
 private:
  inline void set_has_fields();
  inline void clear_has_fields();
  inline void set_has_affected_rows();
  inline void clear_has_affected_rows();
  inline void set_has_rows();
  inline void clear_has_rows();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::db_fields* fields_;
  ::google::protobuf::uint64 affected_rows_;
  ::db_rows* rows_;
  ::db_error* error_;
  bool success_;
  friend void  protobuf_AddDesc_db_5fquery_2eproto();
  friend void protobuf_AssignDesc_db_5fquery_2eproto();
  friend void protobuf_ShutdownFile_db_5fquery_2eproto();

  void InitAsDefaultInstance();
  static db_query_result* default_instance_;
};
// ===================================================================


// ===================================================================

// db_query_param

// required int32 param_type = 1;
inline bool db_query_param::has_param_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_param::set_has_param_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_param::clear_has_param_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_param::clear_param_type() {
  param_type_ = 0;
  clear_has_param_type();
}
inline ::google::protobuf::int32 db_query_param::param_type() const {
  // @@protoc_insertion_point(field_get:db_query_param.param_type)
  return param_type_;
}
inline void db_query_param::set_param_type(::google::protobuf::int32 value) {
  set_has_param_type();
  param_type_ = value;
  // @@protoc_insertion_point(field_set:db_query_param.param_type)
}

// required bytes values = 2;
inline bool db_query_param::has_values() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_param::set_has_values() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_param::clear_has_values() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_param::clear_values() {
  if (values_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    values_->clear();
  }
  clear_has_values();
}
inline const ::std::string& db_query_param::values() const {
  // @@protoc_insertion_point(field_get:db_query_param.values)
  return *values_;
}
inline void db_query_param::set_values(const ::std::string& value) {
  set_has_values();
  if (values_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    values_ = new ::std::string;
  }
  values_->assign(value);
  // @@protoc_insertion_point(field_set:db_query_param.values)
}
inline void db_query_param::set_values(const char* value) {
  set_has_values();
  if (values_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    values_ = new ::std::string;
  }
  values_->assign(value);
  // @@protoc_insertion_point(field_set_char:db_query_param.values)
}
inline void db_query_param::set_values(const void* value, size_t size) {
  set_has_values();
  if (values_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    values_ = new ::std::string;
  }
  values_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db_query_param.values)
}
inline ::std::string* db_query_param::mutable_values() {
  set_has_values();
  if (values_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    values_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:db_query_param.values)
  return values_;
}
inline ::std::string* db_query_param::release_values() {
  clear_has_values();
  if (values_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = values_;
    values_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void db_query_param::set_allocated_values(::std::string* values) {
  if (values_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete values_;
  }
  if (values) {
    set_has_values();
    values_ = values;
  } else {
    clear_has_values();
    values_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:db_query_param.values)
}

// -------------------------------------------------------------------

// db_query

// required string conn = 1;
inline bool db_query::has_conn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query::set_has_conn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query::clear_has_conn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query::clear_conn() {
  if (conn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    conn_->clear();
  }
  clear_has_conn();
}
inline const ::std::string& db_query::conn() const {
  // @@protoc_insertion_point(field_get:db_query.conn)
  return *conn_;
}
inline void db_query::set_conn(const ::std::string& value) {
  set_has_conn();
  if (conn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    conn_ = new ::std::string;
  }
  conn_->assign(value);
  // @@protoc_insertion_point(field_set:db_query.conn)
}
inline void db_query::set_conn(const char* value) {
  set_has_conn();
  if (conn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    conn_ = new ::std::string;
  }
  conn_->assign(value);
  // @@protoc_insertion_point(field_set_char:db_query.conn)
}
inline void db_query::set_conn(const char* value, size_t size) {
  set_has_conn();
  if (conn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    conn_ = new ::std::string;
  }
  conn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db_query.conn)
}
inline ::std::string* db_query::mutable_conn() {
  set_has_conn();
  if (conn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    conn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:db_query.conn)
  return conn_;
}
inline ::std::string* db_query::release_conn() {
  clear_has_conn();
  if (conn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = conn_;
    conn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void db_query::set_allocated_conn(::std::string* conn) {
  if (conn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete conn_;
  }
  if (conn) {
    set_has_conn();
    conn_ = conn;
  } else {
    clear_has_conn();
    conn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:db_query.conn)
}

// required string query = 2;
inline bool db_query::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query::clear_query() {
  if (query_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_->clear();
  }
  clear_has_query();
}
inline const ::std::string& db_query::query() const {
  // @@protoc_insertion_point(field_get:db_query.query)
  return *query_;
}
inline void db_query::set_query(const ::std::string& value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_ = new ::std::string;
  }
  query_->assign(value);
  // @@protoc_insertion_point(field_set:db_query.query)
}
inline void db_query::set_query(const char* value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_ = new ::std::string;
  }
  query_->assign(value);
  // @@protoc_insertion_point(field_set_char:db_query.query)
}
inline void db_query::set_query(const char* value, size_t size) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_ = new ::std::string;
  }
  query_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db_query.query)
}
inline ::std::string* db_query::mutable_query() {
  set_has_query();
  if (query_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:db_query.query)
  return query_;
}
inline ::std::string* db_query::release_query() {
  clear_has_query();
  if (query_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = query_;
    query_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void db_query::set_allocated_query(::std::string* query) {
  if (query_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete query_;
  }
  if (query) {
    set_has_query();
    query_ = query;
  } else {
    clear_has_query();
    query_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:db_query.query)
}

// repeated .db_query_param params = 3;
inline int db_query::params_size() const {
  return params_.size();
}
inline void db_query::clear_params() {
  params_.Clear();
}
inline const ::db_query_param& db_query::params(int index) const {
  // @@protoc_insertion_point(field_get:db_query.params)
  return params_.Get(index);
}
inline ::db_query_param* db_query::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:db_query.params)
  return params_.Mutable(index);
}
inline ::db_query_param* db_query::add_params() {
  // @@protoc_insertion_point(field_add:db_query.params)
  return params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::db_query_param >&
db_query::params() const {
  // @@protoc_insertion_point(field_list:db_query.params)
  return params_;
}
inline ::google::protobuf::RepeatedPtrField< ::db_query_param >*
db_query::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:db_query.params)
  return &params_;
}

// -------------------------------------------------------------------

// db_field

// required string name = 1;
inline bool db_field::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_field::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_field::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_field::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_field::name() const {
  // @@protoc_insertion_point(field_get:db_field.name)
  return *name_;
}
inline void db_field::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:db_field.name)
}
inline void db_field::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:db_field.name)
}
inline void db_field::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db_field.name)
}
inline ::std::string* db_field::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:db_field.name)
  return name_;
}
inline ::std::string* db_field::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void db_field::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:db_field.name)
}

// required int32 type = 2;
inline bool db_field::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_field::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_field::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_field::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 db_field::type() const {
  // @@protoc_insertion_point(field_get:db_field.type)
  return type_;
}
inline void db_field::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db_field.type)
}

// -------------------------------------------------------------------

// db_fields

// repeated .db_field fields = 1;
inline int db_fields::fields_size() const {
  return fields_.size();
}
inline void db_fields::clear_fields() {
  fields_.Clear();
}
inline const ::db_field& db_fields::fields(int index) const {
  // @@protoc_insertion_point(field_get:db_fields.fields)
  return fields_.Get(index);
}
inline ::db_field* db_fields::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:db_fields.fields)
  return fields_.Mutable(index);
}
inline ::db_field* db_fields::add_fields() {
  // @@protoc_insertion_point(field_add:db_fields.fields)
  return fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::db_field >&
db_fields::fields() const {
  // @@protoc_insertion_point(field_list:db_fields.fields)
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::db_field >*
db_fields::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:db_fields.fields)
  return &fields_;
}

// -------------------------------------------------------------------

// db_row_value

// required bytes value = 1;
inline bool db_row_value::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_row_value::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_row_value::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_row_value::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& db_row_value::value() const {
  // @@protoc_insertion_point(field_get:db_row_value.value)
  return *value_;
}
inline void db_row_value::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:db_row_value.value)
}
inline void db_row_value::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:db_row_value.value)
}
inline void db_row_value::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db_row_value.value)
}
inline ::std::string* db_row_value::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:db_row_value.value)
  return value_;
}
inline ::std::string* db_row_value::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void db_row_value::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:db_row_value.value)
}

// required bool is_null = 2 [default = false];
inline bool db_row_value::has_is_null() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_row_value::set_has_is_null() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_row_value::clear_has_is_null() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_row_value::clear_is_null() {
  is_null_ = false;
  clear_has_is_null();
}
inline bool db_row_value::is_null() const {
  // @@protoc_insertion_point(field_get:db_row_value.is_null)
  return is_null_;
}
inline void db_row_value::set_is_null(bool value) {
  set_has_is_null();
  is_null_ = value;
  // @@protoc_insertion_point(field_set:db_row_value.is_null)
}

// required bool is_unsigned = 3 [default = false];
inline bool db_row_value::has_is_unsigned() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_row_value::set_has_is_unsigned() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_row_value::clear_has_is_unsigned() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_row_value::clear_is_unsigned() {
  is_unsigned_ = false;
  clear_has_is_unsigned();
}
inline bool db_row_value::is_unsigned() const {
  // @@protoc_insertion_point(field_get:db_row_value.is_unsigned)
  return is_unsigned_;
}
inline void db_row_value::set_is_unsigned(bool value) {
  set_has_is_unsigned();
  is_unsigned_ = value;
  // @@protoc_insertion_point(field_set:db_row_value.is_unsigned)
}

// -------------------------------------------------------------------

// db_row

// repeated .db_row_value column = 1;
inline int db_row::column_size() const {
  return column_.size();
}
inline void db_row::clear_column() {
  column_.Clear();
}
inline const ::db_row_value& db_row::column(int index) const {
  // @@protoc_insertion_point(field_get:db_row.column)
  return column_.Get(index);
}
inline ::db_row_value* db_row::mutable_column(int index) {
  // @@protoc_insertion_point(field_mutable:db_row.column)
  return column_.Mutable(index);
}
inline ::db_row_value* db_row::add_column() {
  // @@protoc_insertion_point(field_add:db_row.column)
  return column_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::db_row_value >&
db_row::column() const {
  // @@protoc_insertion_point(field_list:db_row.column)
  return column_;
}
inline ::google::protobuf::RepeatedPtrField< ::db_row_value >*
db_row::mutable_column() {
  // @@protoc_insertion_point(field_mutable_list:db_row.column)
  return &column_;
}

// -------------------------------------------------------------------

// db_rows

// repeated .db_row rows = 1;
inline int db_rows::rows_size() const {
  return rows_.size();
}
inline void db_rows::clear_rows() {
  rows_.Clear();
}
inline const ::db_row& db_rows::rows(int index) const {
  // @@protoc_insertion_point(field_get:db_rows.rows)
  return rows_.Get(index);
}
inline ::db_row* db_rows::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:db_rows.rows)
  return rows_.Mutable(index);
}
inline ::db_row* db_rows::add_rows() {
  // @@protoc_insertion_point(field_add:db_rows.rows)
  return rows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::db_row >&
db_rows::rows() const {
  // @@protoc_insertion_point(field_list:db_rows.rows)
  return rows_;
}
inline ::google::protobuf::RepeatedPtrField< ::db_row >*
db_rows::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:db_rows.rows)
  return &rows_;
}

// -------------------------------------------------------------------

// db_error

// required bool is_mysql_error = 1;
inline bool db_error::has_is_mysql_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_error::set_has_is_mysql_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_error::clear_has_is_mysql_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_error::clear_is_mysql_error() {
  is_mysql_error_ = false;
  clear_has_is_mysql_error();
}
inline bool db_error::is_mysql_error() const {
  // @@protoc_insertion_point(field_get:db_error.is_mysql_error)
  return is_mysql_error_;
}
inline void db_error::set_is_mysql_error(bool value) {
  set_has_is_mysql_error();
  is_mysql_error_ = value;
  // @@protoc_insertion_point(field_set:db_error.is_mysql_error)
}

// required int32 error_code = 2;
inline bool db_error::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_error::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_error::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_error::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 db_error::error_code() const {
  // @@protoc_insertion_point(field_get:db_error.error_code)
  return error_code_;
}
inline void db_error::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:db_error.error_code)
}

// required string reason = 3;
inline bool db_error::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_error::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_error::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_error::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& db_error::reason() const {
  // @@protoc_insertion_point(field_get:db_error.reason)
  return *reason_;
}
inline void db_error::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:db_error.reason)
}
inline void db_error::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:db_error.reason)
}
inline void db_error::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db_error.reason)
}
inline ::std::string* db_error::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:db_error.reason)
  return reason_;
}
inline ::std::string* db_error::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void db_error::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:db_error.reason)
}

// -------------------------------------------------------------------

// db_query_result

// optional .db_fields fields = 1;
inline bool db_query_result::has_fields() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_result::set_has_fields() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_result::clear_has_fields() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_result::clear_fields() {
  if (fields_ != NULL) fields_->::db_fields::Clear();
  clear_has_fields();
}
inline const ::db_fields& db_query_result::fields() const {
  // @@protoc_insertion_point(field_get:db_query_result.fields)
  return fields_ != NULL ? *fields_ : *default_instance_->fields_;
}
inline ::db_fields* db_query_result::mutable_fields() {
  set_has_fields();
  if (fields_ == NULL) fields_ = new ::db_fields;
  // @@protoc_insertion_point(field_mutable:db_query_result.fields)
  return fields_;
}
inline ::db_fields* db_query_result::release_fields() {
  clear_has_fields();
  ::db_fields* temp = fields_;
  fields_ = NULL;
  return temp;
}
inline void db_query_result::set_allocated_fields(::db_fields* fields) {
  delete fields_;
  fields_ = fields;
  if (fields) {
    set_has_fields();
  } else {
    clear_has_fields();
  }
  // @@protoc_insertion_point(field_set_allocated:db_query_result.fields)
}

// optional uint64 affected_rows = 2;
inline bool db_query_result::has_affected_rows() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_result::set_has_affected_rows() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_result::clear_has_affected_rows() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_result::clear_affected_rows() {
  affected_rows_ = GOOGLE_ULONGLONG(0);
  clear_has_affected_rows();
}
inline ::google::protobuf::uint64 db_query_result::affected_rows() const {
  // @@protoc_insertion_point(field_get:db_query_result.affected_rows)
  return affected_rows_;
}
inline void db_query_result::set_affected_rows(::google::protobuf::uint64 value) {
  set_has_affected_rows();
  affected_rows_ = value;
  // @@protoc_insertion_point(field_set:db_query_result.affected_rows)
}

// optional .db_rows rows = 3;
inline bool db_query_result::has_rows() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_query_result::set_has_rows() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_query_result::clear_has_rows() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_query_result::clear_rows() {
  if (rows_ != NULL) rows_->::db_rows::Clear();
  clear_has_rows();
}
inline const ::db_rows& db_query_result::rows() const {
  // @@protoc_insertion_point(field_get:db_query_result.rows)
  return rows_ != NULL ? *rows_ : *default_instance_->rows_;
}
inline ::db_rows* db_query_result::mutable_rows() {
  set_has_rows();
  if (rows_ == NULL) rows_ = new ::db_rows;
  // @@protoc_insertion_point(field_mutable:db_query_result.rows)
  return rows_;
}
inline ::db_rows* db_query_result::release_rows() {
  clear_has_rows();
  ::db_rows* temp = rows_;
  rows_ = NULL;
  return temp;
}
inline void db_query_result::set_allocated_rows(::db_rows* rows) {
  delete rows_;
  rows_ = rows;
  if (rows) {
    set_has_rows();
  } else {
    clear_has_rows();
  }
  // @@protoc_insertion_point(field_set_allocated:db_query_result.rows)
}

// required bool success = 4;
inline bool db_query_result::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_query_result::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_query_result::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_query_result::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool db_query_result::success() const {
  // @@protoc_insertion_point(field_get:db_query_result.success)
  return success_;
}
inline void db_query_result::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:db_query_result.success)
}

// optional .db_error error = 5;
inline bool db_query_result::has_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_query_result::set_has_error() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_query_result::clear_has_error() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_query_result::clear_error() {
  if (error_ != NULL) error_->::db_error::Clear();
  clear_has_error();
}
inline const ::db_error& db_query_result::error() const {
  // @@protoc_insertion_point(field_get:db_query_result.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::db_error* db_query_result::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::db_error;
  // @@protoc_insertion_point(field_mutable:db_query_result.error)
  return error_;
}
inline ::db_error* db_query_result::release_error() {
  clear_has_error();
  ::db_error* temp = error_;
  error_ = NULL;
  return temp;
}
inline void db_query_result::set_allocated_error(::db_error* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:db_query_result.error)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_db_5fquery_2eproto__INCLUDED
