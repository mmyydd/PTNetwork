/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: db_query.proto */

#ifndef PROTOBUF_C_db_5fquery_2eproto__INCLUDED
#define PROTOBUF_C_db_5fquery_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _DbQueryParam DbQueryParam;
typedef struct _DbQuery DbQuery;
typedef struct _DbField DbField;
typedef struct _DbFields DbFields;
typedef struct _DbRowValue DbRowValue;
typedef struct _DbRow DbRow;
typedef struct _DbRows DbRows;
typedef struct _DbError DbError;
typedef struct _DbQueryResult DbQueryResult;


/* --- enums --- */


/* --- messages --- */

/*
 *查询参数
 */
struct  _DbQueryParam
{
  ProtobufCMessage base;
  /*
   *等同于MYSQL_TYPE_XXX
   */
  int32_t param_type;
  /*
   *根据TYPE_XXX判断类型
   */
  ProtobufCBinaryData values;
};
#define DB_QUERY_PARAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&db_query_param__descriptor) \
    , 0, {0,NULL} }


/*
 *一个构造查询信息的结构
 */
struct  _DbQuery
{
  ProtobufCMessage base;
  /*
   *数据库连接标志
   *使用哪个数据库连接
   */
  char *conn;
  /*
   *查询的sql 
   *select * from tbl where a = ? and b = ?
   *使用参数绑定
   */
  char *query;
  /*
   *参数绑定的参数 按照sql的顺序传入
   */
  size_t n_params;
  DbQueryParam **params;
};
#define DB_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&db_query__descriptor) \
    , NULL, NULL, 0,NULL }


struct  _DbField
{
  ProtobufCMessage base;
  /*
   *field的名称
   */
  char *name;
  /*
   *等同于MYSQL_TYPE_XXXX
   */
  int32_t type;
};
#define DB_FIELD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&db_field__descriptor) \
    , NULL, 0 }


struct  _DbFields
{
  ProtobufCMessage base;
  size_t n_fields;
  DbField **fields;
};
#define DB_FIELDS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&db_fields__descriptor) \
    , 0,NULL }


struct  _DbRowValue
{
  ProtobufCMessage base;
  ProtobufCBinaryData value;
  protobuf_c_boolean is_null;
  protobuf_c_boolean is_unsigned;
};
#define DB_ROW_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&db_row_value__descriptor) \
    , {0,NULL}, 0, 0 }


struct  _DbRow
{
  ProtobufCMessage base;
  size_t n_column;
  DbRowValue **column;
};
#define DB_ROW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&db_row__descriptor) \
    , 0,NULL }


struct  _DbRows
{
  ProtobufCMessage base;
  size_t n_rows;
  DbRow **rows;
};
#define DB_ROWS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&db_rows__descriptor) \
    , 0,NULL }


struct  _DbError
{
  ProtobufCMessage base;
  protobuf_c_boolean is_mysql_error;
  int32_t error_code;
  char *reason;
};
#define DB_ERROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&db_error__descriptor) \
    , 0, 0, NULL }


struct  _DbQueryResult
{
  ProtobufCMessage base;
  /*
   *数据库字段信息
   */
  DbFields *fields;
  /*
   *update delete insert影响的行数
   */
  protobuf_c_boolean has_affected_rows;
  uint64_t affected_rows;
  /*
   *表示查询的结果row
   */
  DbRows *rows;
  /*
   *是否操作成功
   */
  protobuf_c_boolean success;
  /*
   *数据库记录错误信息
   */
  DbError *error;
};
#define DB_QUERY_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&db_query_result__descriptor) \
    , NULL, 0,0, NULL, 0, NULL }


/* DbQueryParam methods */
void   db_query_param__init
                     (DbQueryParam         *message);
size_t db_query_param__get_packed_size
                     (const DbQueryParam   *message);
size_t db_query_param__pack
                     (const DbQueryParam   *message,
                      uint8_t             *out);
size_t db_query_param__pack_to_buffer
                     (const DbQueryParam   *message,
                      ProtobufCBuffer     *buffer);
DbQueryParam *
       db_query_param__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   db_query_param__free_unpacked
                     (DbQueryParam *message,
                      ProtobufCAllocator *allocator);
/* DbQuery methods */
void   db_query__init
                     (DbQuery         *message);
size_t db_query__get_packed_size
                     (const DbQuery   *message);
size_t db_query__pack
                     (const DbQuery   *message,
                      uint8_t             *out);
size_t db_query__pack_to_buffer
                     (const DbQuery   *message,
                      ProtobufCBuffer     *buffer);
DbQuery *
       db_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   db_query__free_unpacked
                     (DbQuery *message,
                      ProtobufCAllocator *allocator);
/* DbField methods */
void   db_field__init
                     (DbField         *message);
size_t db_field__get_packed_size
                     (const DbField   *message);
size_t db_field__pack
                     (const DbField   *message,
                      uint8_t             *out);
size_t db_field__pack_to_buffer
                     (const DbField   *message,
                      ProtobufCBuffer     *buffer);
DbField *
       db_field__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   db_field__free_unpacked
                     (DbField *message,
                      ProtobufCAllocator *allocator);
/* DbFields methods */
void   db_fields__init
                     (DbFields         *message);
size_t db_fields__get_packed_size
                     (const DbFields   *message);
size_t db_fields__pack
                     (const DbFields   *message,
                      uint8_t             *out);
size_t db_fields__pack_to_buffer
                     (const DbFields   *message,
                      ProtobufCBuffer     *buffer);
DbFields *
       db_fields__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   db_fields__free_unpacked
                     (DbFields *message,
                      ProtobufCAllocator *allocator);
/* DbRowValue methods */
void   db_row_value__init
                     (DbRowValue         *message);
size_t db_row_value__get_packed_size
                     (const DbRowValue   *message);
size_t db_row_value__pack
                     (const DbRowValue   *message,
                      uint8_t             *out);
size_t db_row_value__pack_to_buffer
                     (const DbRowValue   *message,
                      ProtobufCBuffer     *buffer);
DbRowValue *
       db_row_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   db_row_value__free_unpacked
                     (DbRowValue *message,
                      ProtobufCAllocator *allocator);
/* DbRow methods */
void   db_row__init
                     (DbRow         *message);
size_t db_row__get_packed_size
                     (const DbRow   *message);
size_t db_row__pack
                     (const DbRow   *message,
                      uint8_t             *out);
size_t db_row__pack_to_buffer
                     (const DbRow   *message,
                      ProtobufCBuffer     *buffer);
DbRow *
       db_row__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   db_row__free_unpacked
                     (DbRow *message,
                      ProtobufCAllocator *allocator);
/* DbRows methods */
void   db_rows__init
                     (DbRows         *message);
size_t db_rows__get_packed_size
                     (const DbRows   *message);
size_t db_rows__pack
                     (const DbRows   *message,
                      uint8_t             *out);
size_t db_rows__pack_to_buffer
                     (const DbRows   *message,
                      ProtobufCBuffer     *buffer);
DbRows *
       db_rows__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   db_rows__free_unpacked
                     (DbRows *message,
                      ProtobufCAllocator *allocator);
/* DbError methods */
void   db_error__init
                     (DbError         *message);
size_t db_error__get_packed_size
                     (const DbError   *message);
size_t db_error__pack
                     (const DbError   *message,
                      uint8_t             *out);
size_t db_error__pack_to_buffer
                     (const DbError   *message,
                      ProtobufCBuffer     *buffer);
DbError *
       db_error__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   db_error__free_unpacked
                     (DbError *message,
                      ProtobufCAllocator *allocator);
/* DbQueryResult methods */
void   db_query_result__init
                     (DbQueryResult         *message);
size_t db_query_result__get_packed_size
                     (const DbQueryResult   *message);
size_t db_query_result__pack
                     (const DbQueryResult   *message,
                      uint8_t             *out);
size_t db_query_result__pack_to_buffer
                     (const DbQueryResult   *message,
                      ProtobufCBuffer     *buffer);
DbQueryResult *
       db_query_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   db_query_result__free_unpacked
                     (DbQueryResult *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*DbQueryParam_Closure)
                 (const DbQueryParam *message,
                  void *closure_data);
typedef void (*DbQuery_Closure)
                 (const DbQuery *message,
                  void *closure_data);
typedef void (*DbField_Closure)
                 (const DbField *message,
                  void *closure_data);
typedef void (*DbFields_Closure)
                 (const DbFields *message,
                  void *closure_data);
typedef void (*DbRowValue_Closure)
                 (const DbRowValue *message,
                  void *closure_data);
typedef void (*DbRow_Closure)
                 (const DbRow *message,
                  void *closure_data);
typedef void (*DbRows_Closure)
                 (const DbRows *message,
                  void *closure_data);
typedef void (*DbError_Closure)
                 (const DbError *message,
                  void *closure_data);
typedef void (*DbQueryResult_Closure)
                 (const DbQueryResult *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor db_query_param__descriptor;
extern const ProtobufCMessageDescriptor db_query__descriptor;
extern const ProtobufCMessageDescriptor db_field__descriptor;
extern const ProtobufCMessageDescriptor db_fields__descriptor;
extern const ProtobufCMessageDescriptor db_row_value__descriptor;
extern const ProtobufCMessageDescriptor db_row__descriptor;
extern const ProtobufCMessageDescriptor db_rows__descriptor;
extern const ProtobufCMessageDescriptor db_error__descriptor;
extern const ProtobufCMessageDescriptor db_query_result__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_db_5fquery_2eproto__INCLUDED */
