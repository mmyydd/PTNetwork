// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: database_config.proto

#ifndef PROTOBUF_database_5fconfig_2eproto__INCLUDED
#define PROTOBUF_database_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_database_5fconfig_2eproto();
void protobuf_AssignDesc_database_5fconfig_2eproto();
void protobuf_ShutdownFile_database_5fconfig_2eproto();

class database_node;
class database_config;

// ===================================================================

class database_node : public ::google::protobuf::Message {
 public:
  database_node();
  virtual ~database_node();

  database_node(const database_node& from);

  inline database_node& operator=(const database_node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const database_node& default_instance();

  void Swap(database_node* other);

  // implements Message ----------------------------------------------

  database_node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const database_node& from);
  void MergeFrom(const database_node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string address = 2;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // required int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // required string username = 4;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 4;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string password = 5;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 5;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // required string dbname = 6;
  inline bool has_dbname() const;
  inline void clear_dbname();
  static const int kDbnameFieldNumber = 6;
  inline const ::std::string& dbname() const;
  inline void set_dbname(const ::std::string& value);
  inline void set_dbname(const char* value);
  inline void set_dbname(const char* value, size_t size);
  inline ::std::string* mutable_dbname();
  inline ::std::string* release_dbname();
  inline void set_allocated_dbname(::std::string* dbname);

  // @@protoc_insertion_point(class_scope:database_node)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_dbname();
  inline void clear_has_dbname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* address_;
  ::std::string* username_;
  ::std::string* password_;
  ::std::string* dbname_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_AddDesc_database_5fconfig_2eproto();
  friend void protobuf_AssignDesc_database_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_database_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static database_node* default_instance_;
};
// -------------------------------------------------------------------

class database_config : public ::google::protobuf::Message {
 public:
  database_config();
  virtual ~database_config();

  database_config(const database_config& from);

  inline database_config& operator=(const database_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const database_config& default_instance();

  void Swap(database_config* other);

  // implements Message ----------------------------------------------

  database_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const database_config& from);
  void MergeFrom(const database_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .database_node databases = 1;
  inline int databases_size() const;
  inline void clear_databases();
  static const int kDatabasesFieldNumber = 1;
  inline const ::database_node& databases(int index) const;
  inline ::database_node* mutable_databases(int index);
  inline ::database_node* add_databases();
  inline const ::google::protobuf::RepeatedPtrField< ::database_node >&
      databases() const;
  inline ::google::protobuf::RepeatedPtrField< ::database_node >*
      mutable_databases();

  // @@protoc_insertion_point(class_scope:database_config)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::database_node > databases_;
  friend void  protobuf_AddDesc_database_5fconfig_2eproto();
  friend void protobuf_AssignDesc_database_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_database_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static database_config* default_instance_;
};
// ===================================================================


// ===================================================================

// database_node

// required string name = 1;
inline bool database_node::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void database_node::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void database_node::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void database_node::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& database_node::name() const {
  // @@protoc_insertion_point(field_get:database_node.name)
  return *name_;
}
inline void database_node::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:database_node.name)
}
inline void database_node::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:database_node.name)
}
inline void database_node::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:database_node.name)
}
inline ::std::string* database_node::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:database_node.name)
  return name_;
}
inline ::std::string* database_node::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void database_node::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:database_node.name)
}

// required string address = 2;
inline bool database_node::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void database_node::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void database_node::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void database_node::clear_address() {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& database_node::address() const {
  // @@protoc_insertion_point(field_get:database_node.address)
  return *address_;
}
inline void database_node::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set:database_node.address)
}
inline void database_node::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set_char:database_node.address)
}
inline void database_node::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:database_node.address)
}
inline ::std::string* database_node::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:database_node.address)
  return address_;
}
inline ::std::string* database_node::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void database_node::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:database_node.address)
}

// required int32 port = 3;
inline bool database_node::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void database_node::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void database_node::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void database_node::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 database_node::port() const {
  // @@protoc_insertion_point(field_get:database_node.port)
  return port_;
}
inline void database_node::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:database_node.port)
}

// required string username = 4;
inline bool database_node::has_username() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void database_node::set_has_username() {
  _has_bits_[0] |= 0x00000008u;
}
inline void database_node::clear_has_username() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void database_node::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& database_node::username() const {
  // @@protoc_insertion_point(field_get:database_node.username)
  return *username_;
}
inline void database_node::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:database_node.username)
}
inline void database_node::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:database_node.username)
}
inline void database_node::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:database_node.username)
}
inline ::std::string* database_node::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:database_node.username)
  return username_;
}
inline ::std::string* database_node::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void database_node::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:database_node.username)
}

// required string password = 5;
inline bool database_node::has_password() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void database_node::set_has_password() {
  _has_bits_[0] |= 0x00000010u;
}
inline void database_node::clear_has_password() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void database_node::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& database_node::password() const {
  // @@protoc_insertion_point(field_get:database_node.password)
  return *password_;
}
inline void database_node::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:database_node.password)
}
inline void database_node::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:database_node.password)
}
inline void database_node::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:database_node.password)
}
inline ::std::string* database_node::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:database_node.password)
  return password_;
}
inline ::std::string* database_node::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void database_node::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:database_node.password)
}

// required string dbname = 6;
inline bool database_node::has_dbname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void database_node::set_has_dbname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void database_node::clear_has_dbname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void database_node::clear_dbname() {
  if (dbname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbname_->clear();
  }
  clear_has_dbname();
}
inline const ::std::string& database_node::dbname() const {
  // @@protoc_insertion_point(field_get:database_node.dbname)
  return *dbname_;
}
inline void database_node::set_dbname(const ::std::string& value) {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbname_ = new ::std::string;
  }
  dbname_->assign(value);
  // @@protoc_insertion_point(field_set:database_node.dbname)
}
inline void database_node::set_dbname(const char* value) {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbname_ = new ::std::string;
  }
  dbname_->assign(value);
  // @@protoc_insertion_point(field_set_char:database_node.dbname)
}
inline void database_node::set_dbname(const char* value, size_t size) {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbname_ = new ::std::string;
  }
  dbname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:database_node.dbname)
}
inline ::std::string* database_node::mutable_dbname() {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:database_node.dbname)
  return dbname_;
}
inline ::std::string* database_node::release_dbname() {
  clear_has_dbname();
  if (dbname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dbname_;
    dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void database_node::set_allocated_dbname(::std::string* dbname) {
  if (dbname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbname_;
  }
  if (dbname) {
    set_has_dbname();
    dbname_ = dbname;
  } else {
    clear_has_dbname();
    dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:database_node.dbname)
}

// -------------------------------------------------------------------

// database_config

// repeated .database_node databases = 1;
inline int database_config::databases_size() const {
  return databases_.size();
}
inline void database_config::clear_databases() {
  databases_.Clear();
}
inline const ::database_node& database_config::databases(int index) const {
  // @@protoc_insertion_point(field_get:database_config.databases)
  return databases_.Get(index);
}
inline ::database_node* database_config::mutable_databases(int index) {
  // @@protoc_insertion_point(field_mutable:database_config.databases)
  return databases_.Mutable(index);
}
inline ::database_node* database_config::add_databases() {
  // @@protoc_insertion_point(field_add:database_config.databases)
  return databases_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::database_node >&
database_config::databases() const {
  // @@protoc_insertion_point(field_list:database_config.databases)
  return databases_;
}
inline ::google::protobuf::RepeatedPtrField< ::database_node >*
database_config::mutable_databases() {
  // @@protoc_insertion_point(field_mutable_list:database_config.databases)
  return &databases_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_database_5fconfig_2eproto__INCLUDED
