// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_query.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "db_query.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* db_query_param_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_param_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_field_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_field_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_fields_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_fields_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_row_value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_row_value_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_row_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_row_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_rows_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_rows_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_error_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_db_5fquery_2eproto() {
  protobuf_AddDesc_db_5fquery_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "db_query.proto");
  GOOGLE_CHECK(file != NULL);
  db_query_param_descriptor_ = file->message_type(0);
  static const int db_query_param_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_param, param_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_param, values_),
  };
  db_query_param_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_param_descriptor_,
      db_query_param::default_instance_,
      db_query_param_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_param, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_param, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_param));
  db_query_descriptor_ = file->message_type(1);
  static const int db_query_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query, conn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query, params_),
  };
  db_query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_descriptor_,
      db_query::default_instance_,
      db_query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query));
  db_field_descriptor_ = file->message_type(2);
  static const int db_field_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_field, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_field, type_),
  };
  db_field_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_field_descriptor_,
      db_field::default_instance_,
      db_field_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_field, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_field, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_field));
  db_fields_descriptor_ = file->message_type(3);
  static const int db_fields_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fields, fields_),
  };
  db_fields_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_fields_descriptor_,
      db_fields::default_instance_,
      db_fields_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fields, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fields, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_fields));
  db_row_value_descriptor_ = file->message_type(4);
  static const int db_row_value_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_row_value, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_row_value, is_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_row_value, is_unsigned_),
  };
  db_row_value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_row_value_descriptor_,
      db_row_value::default_instance_,
      db_row_value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_row_value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_row_value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_row_value));
  db_row_descriptor_ = file->message_type(5);
  static const int db_row_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_row, column_),
  };
  db_row_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_row_descriptor_,
      db_row::default_instance_,
      db_row_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_row, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_row, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_row));
  db_rows_descriptor_ = file->message_type(6);
  static const int db_rows_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rows, rows_),
  };
  db_rows_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_rows_descriptor_,
      db_rows::default_instance_,
      db_rows_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rows, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rows, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_rows));
  db_error_descriptor_ = file->message_type(7);
  static const int db_error_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_error, is_mysql_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_error, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_error, reason_),
  };
  db_error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_error_descriptor_,
      db_error::default_instance_,
      db_error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_error));
  db_query_result_descriptor_ = file->message_type(8);
  static const int db_query_result_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_result, fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_result, affected_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_result, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_result, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_result, error_),
  };
  db_query_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_result_descriptor_,
      db_query_result::default_instance_,
      db_query_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_db_5fquery_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_param_descriptor_, &db_query_param::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_descriptor_, &db_query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_field_descriptor_, &db_field::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_fields_descriptor_, &db_fields::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_row_value_descriptor_, &db_row_value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_row_descriptor_, &db_row::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_rows_descriptor_, &db_rows::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_error_descriptor_, &db_error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_result_descriptor_, &db_query_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_db_5fquery_2eproto() {
  delete db_query_param::default_instance_;
  delete db_query_param_reflection_;
  delete db_query::default_instance_;
  delete db_query_reflection_;
  delete db_field::default_instance_;
  delete db_field_reflection_;
  delete db_fields::default_instance_;
  delete db_fields_reflection_;
  delete db_row_value::default_instance_;
  delete db_row_value_reflection_;
  delete db_row::default_instance_;
  delete db_row_reflection_;
  delete db_rows::default_instance_;
  delete db_rows_reflection_;
  delete db_error::default_instance_;
  delete db_error_reflection_;
  delete db_query_result::default_instance_;
  delete db_query_result_reflection_;
}

void protobuf_AddDesc_db_5fquery_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016db_query.proto\"4\n\016db_query_param\022\022\n\npa"
    "ram_type\030\001 \002(\005\022\016\n\006values\030\002 \002(\014\"H\n\010db_que"
    "ry\022\014\n\004conn\030\001 \002(\t\022\r\n\005query\030\002 \002(\t\022\037\n\006param"
    "s\030\003 \003(\0132\017.db_query_param\"&\n\010db_field\022\014\n\004"
    "name\030\001 \002(\t\022\014\n\004type\030\002 \002(\005\"&\n\tdb_fields\022\031\n"
    "\006fields\030\001 \003(\0132\t.db_field\"Q\n\014db_row_value"
    "\022\r\n\005value\030\001 \002(\014\022\026\n\007is_null\030\002 \002(\010:\005false\022"
    "\032\n\013is_unsigned\030\003 \002(\010:\005false\"\'\n\006db_row\022\035\n"
    "\006column\030\001 \003(\0132\r.db_row_value\" \n\007db_rows\022"
    "\025\n\004rows\030\001 \003(\0132\007.db_row\"F\n\010db_error\022\026\n\016is"
    "_mysql_error\030\001 \002(\010\022\022\n\nerror_code\030\002 \002(\005\022\016"
    "\n\006reason\030\003 \002(\t\"\207\001\n\017db_query_result\022\032\n\006fi"
    "elds\030\001 \001(\0132\n.db_fields\022\025\n\raffected_rows\030"
    "\002 \001(\004\022\026\n\004rows\030\003 \001(\0132\010.db_rows\022\017\n\007success"
    "\030\004 \002(\010\022\030\n\005error\030\005 \001(\0132\t.db_error", 592);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "db_query.proto", &protobuf_RegisterTypes);
  db_query_param::default_instance_ = new db_query_param();
  db_query::default_instance_ = new db_query();
  db_field::default_instance_ = new db_field();
  db_fields::default_instance_ = new db_fields();
  db_row_value::default_instance_ = new db_row_value();
  db_row::default_instance_ = new db_row();
  db_rows::default_instance_ = new db_rows();
  db_error::default_instance_ = new db_error();
  db_query_result::default_instance_ = new db_query_result();
  db_query_param::default_instance_->InitAsDefaultInstance();
  db_query::default_instance_->InitAsDefaultInstance();
  db_field::default_instance_->InitAsDefaultInstance();
  db_fields::default_instance_->InitAsDefaultInstance();
  db_row_value::default_instance_->InitAsDefaultInstance();
  db_row::default_instance_->InitAsDefaultInstance();
  db_rows::default_instance_->InitAsDefaultInstance();
  db_error::default_instance_->InitAsDefaultInstance();
  db_query_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_db_5fquery_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_db_5fquery_2eproto {
  StaticDescriptorInitializer_db_5fquery_2eproto() {
    protobuf_AddDesc_db_5fquery_2eproto();
  }
} static_descriptor_initializer_db_5fquery_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int db_query_param::kParamTypeFieldNumber;
const int db_query_param::kValuesFieldNumber;
#endif  // !_MSC_VER

db_query_param::db_query_param()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db_query_param)
}

void db_query_param::InitAsDefaultInstance() {
}

db_query_param::db_query_param(const db_query_param& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db_query_param)
}

void db_query_param::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  param_type_ = 0;
  values_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_param::~db_query_param() {
  // @@protoc_insertion_point(destructor:db_query_param)
  SharedDtor();
}

void db_query_param::SharedDtor() {
  if (values_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete values_;
  }
  if (this != default_instance_) {
  }
}

void db_query_param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_param::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_param_descriptor_;
}

const db_query_param& db_query_param::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fquery_2eproto();
  return *default_instance_;
}

db_query_param* db_query_param::default_instance_ = NULL;

db_query_param* db_query_param::New() const {
  return new db_query_param;
}

void db_query_param::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    param_type_ = 0;
    if (has_values()) {
      if (values_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        values_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db_query_param)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 param_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_type_)));
          set_has_param_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // required bytes values = 2;
      case 2: {
        if (tag == 18) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db_query_param)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db_query_param)
  return false;
#undef DO_
}

void db_query_param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db_query_param)
  // required int32 param_type = 1;
  if (has_param_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->param_type(), output);
  }

  // required bytes values = 2;
  if (has_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->values(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db_query_param)
}

::google::protobuf::uint8* db_query_param::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_query_param)
  // required int32 param_type = 1;
  if (has_param_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->param_type(), target);
  }

  // required bytes values = 2;
  if (has_values()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->values(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_query_param)
  return target;
}

int db_query_param::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 param_type = 1;
    if (has_param_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param_type());
    }

    // required bytes values = 2;
    if (has_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->values());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_param::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_param* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_param*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_param::MergeFrom(const db_query_param& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param_type()) {
      set_param_type(from.param_type());
    }
    if (from.has_values()) {
      set_values(from.values());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_param::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_param::CopyFrom(const db_query_param& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_param::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void db_query_param::Swap(db_query_param* other) {
  if (other != this) {
    std::swap(param_type_, other->param_type_);
    std::swap(values_, other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_param::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_param_descriptor_;
  metadata.reflection = db_query_param_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query::kConnFieldNumber;
const int db_query::kQueryFieldNumber;
const int db_query::kParamsFieldNumber;
#endif  // !_MSC_VER

db_query::db_query()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db_query)
}

void db_query::InitAsDefaultInstance() {
}

db_query::db_query(const db_query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db_query)
}

void db_query::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  conn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query::~db_query() {
  // @@protoc_insertion_point(destructor:db_query)
  SharedDtor();
}

void db_query::SharedDtor() {
  if (conn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete conn_;
  }
  if (query_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete query_;
  }
  if (this != default_instance_) {
  }
}

void db_query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_descriptor_;
}

const db_query& db_query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fquery_2eproto();
  return *default_instance_;
}

db_query* db_query::default_instance_ = NULL;

db_query* db_query::New() const {
  return new db_query;
}

void db_query::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_conn()) {
      if (conn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        conn_->clear();
      }
    }
    if (has_query()) {
      if (query_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        query_->clear();
      }
    }
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db_query)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string conn = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->conn().data(), this->conn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "conn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_query;
        break;
      }

      // required string query = 2;
      case 2: {
        if (tag == 18) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "query");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_params;
        break;
      }

      // repeated .db_query_param params = 3;
      case 3: {
        if (tag == 26) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_params;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db_query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db_query)
  return false;
#undef DO_
}

void db_query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db_query)
  // required string conn = 1;
  if (has_conn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->conn().data(), this->conn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "conn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->conn(), output);
  }

  // required string query = 2;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->query(), output);
  }

  // repeated .db_query_param params = 3;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db_query)
}

::google::protobuf::uint8* db_query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_query)
  // required string conn = 1;
  if (has_conn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->conn().data(), this->conn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "conn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->conn(), target);
  }

  // required string query = 2;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query(), target);
  }

  // repeated .db_query_param params = 3;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_query)
  return target;
}

int db_query::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string conn = 1;
    if (has_conn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->conn());
    }

    // required string query = 2;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

  }
  // repeated .db_query_param params = 3;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query::MergeFrom(const db_query& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_conn()) {
      set_conn(from.conn());
    }
    if (from.has_query()) {
      set_query(from.query());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query::CopyFrom(const db_query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->params())) return false;
  return true;
}

void db_query::Swap(db_query* other) {
  if (other != this) {
    std::swap(conn_, other->conn_);
    std::swap(query_, other->query_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_descriptor_;
  metadata.reflection = db_query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_field::kNameFieldNumber;
const int db_field::kTypeFieldNumber;
#endif  // !_MSC_VER

db_field::db_field()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db_field)
}

void db_field::InitAsDefaultInstance() {
}

db_field::db_field(const db_field& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db_field)
}

void db_field::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_field::~db_field() {
  // @@protoc_insertion_point(destructor:db_field)
  SharedDtor();
}

void db_field::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_field::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_field_descriptor_;
}

const db_field& db_field::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fquery_2eproto();
  return *default_instance_;
}

db_field* db_field::default_instance_ = NULL;

db_field* db_field::New() const {
  return new db_field;
}

void db_field::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db_field)
  return false;
#undef DO_
}

void db_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db_field)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db_field)
}

::google::protobuf::uint8* db_field::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_field)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_field)
  return target;
}

int db_field::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_field::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_field* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_field*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_field::MergeFrom(const db_field& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_field::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_field::CopyFrom(const db_field& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_field::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void db_field::Swap(db_field* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_field::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_field_descriptor_;
  metadata.reflection = db_field_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_fields::kFieldsFieldNumber;
#endif  // !_MSC_VER

db_fields::db_fields()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db_fields)
}

void db_fields::InitAsDefaultInstance() {
}

db_fields::db_fields(const db_fields& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db_fields)
}

void db_fields::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_fields::~db_fields() {
  // @@protoc_insertion_point(destructor:db_fields)
  SharedDtor();
}

void db_fields::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_fields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_fields::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_fields_descriptor_;
}

const db_fields& db_fields::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fquery_2eproto();
  return *default_instance_;
}

db_fields* db_fields::default_instance_ = NULL;

db_fields* db_fields::New() const {
  return new db_fields;
}

void db_fields::Clear() {
  fields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_fields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db_fields)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db_field fields = 1;
      case 1: {
        if (tag == 10) {
         parse_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fields()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_fields;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db_fields)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db_fields)
  return false;
#undef DO_
}

void db_fields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db_fields)
  // repeated .db_field fields = 1;
  for (int i = 0; i < this->fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fields(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db_fields)
}

::google::protobuf::uint8* db_fields::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_fields)
  // repeated .db_field fields = 1;
  for (int i = 0; i < this->fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fields(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_fields)
  return target;
}

int db_fields::ByteSize() const {
  int total_size = 0;

  // repeated .db_field fields = 1;
  total_size += 1 * this->fields_size();
  for (int i = 0; i < this->fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fields(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_fields::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_fields* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_fields*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_fields::MergeFrom(const db_fields& from) {
  GOOGLE_CHECK_NE(&from, this);
  fields_.MergeFrom(from.fields_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_fields::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_fields::CopyFrom(const db_fields& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_fields::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->fields())) return false;
  return true;
}

void db_fields::Swap(db_fields* other) {
  if (other != this) {
    fields_.Swap(&other->fields_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_fields::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_fields_descriptor_;
  metadata.reflection = db_fields_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_row_value::kValueFieldNumber;
const int db_row_value::kIsNullFieldNumber;
const int db_row_value::kIsUnsignedFieldNumber;
#endif  // !_MSC_VER

db_row_value::db_row_value()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db_row_value)
}

void db_row_value::InitAsDefaultInstance() {
}

db_row_value::db_row_value(const db_row_value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db_row_value)
}

void db_row_value::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_null_ = false;
  is_unsigned_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_row_value::~db_row_value() {
  // @@protoc_insertion_point(destructor:db_row_value)
  SharedDtor();
}

void db_row_value::SharedDtor() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void db_row_value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_row_value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_row_value_descriptor_;
}

const db_row_value& db_row_value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fquery_2eproto();
  return *default_instance_;
}

db_row_value* db_row_value::default_instance_ = NULL;

db_row_value* db_row_value::New() const {
  return new db_row_value;
}

void db_row_value::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<db_row_value*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(is_null_, is_unsigned_);
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_row_value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db_row_value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_null;
        break;
      }

      // required bool is_null = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_is_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_null_)));
          set_has_is_null();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_unsigned;
        break;
      }

      // required bool is_unsigned = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_is_unsigned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_unsigned_)));
          set_has_is_unsigned();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db_row_value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db_row_value)
  return false;
#undef DO_
}

void db_row_value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db_row_value)
  // required bytes value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  // required bool is_null = 2 [default = false];
  if (has_is_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_null(), output);
  }

  // required bool is_unsigned = 3 [default = false];
  if (has_is_unsigned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_unsigned(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db_row_value)
}

::google::protobuf::uint8* db_row_value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_row_value)
  // required bytes value = 1;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  // required bool is_null = 2 [default = false];
  if (has_is_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_null(), target);
  }

  // required bool is_unsigned = 3 [default = false];
  if (has_is_unsigned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_unsigned(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_row_value)
  return target;
}

int db_row_value::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // required bool is_null = 2 [default = false];
    if (has_is_null()) {
      total_size += 1 + 1;
    }

    // required bool is_unsigned = 3 [default = false];
    if (has_is_unsigned()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_row_value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_row_value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_row_value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_row_value::MergeFrom(const db_row_value& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_is_null()) {
      set_is_null(from.is_null());
    }
    if (from.has_is_unsigned()) {
      set_is_unsigned(from.is_unsigned());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_row_value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_row_value::CopyFrom(const db_row_value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_row_value::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void db_row_value::Swap(db_row_value* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(is_null_, other->is_null_);
    std::swap(is_unsigned_, other->is_unsigned_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_row_value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_row_value_descriptor_;
  metadata.reflection = db_row_value_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_row::kColumnFieldNumber;
#endif  // !_MSC_VER

db_row::db_row()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db_row)
}

void db_row::InitAsDefaultInstance() {
}

db_row::db_row(const db_row& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db_row)
}

void db_row::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_row::~db_row() {
  // @@protoc_insertion_point(destructor:db_row)
  SharedDtor();
}

void db_row::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_row::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_row::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_row_descriptor_;
}

const db_row& db_row::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fquery_2eproto();
  return *default_instance_;
}

db_row* db_row::default_instance_ = NULL;

db_row* db_row::New() const {
  return new db_row;
}

void db_row::Clear() {
  column_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_row::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db_row)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db_row_value column = 1;
      case 1: {
        if (tag == 10) {
         parse_column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_column()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_column;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db_row)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db_row)
  return false;
#undef DO_
}

void db_row::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db_row)
  // repeated .db_row_value column = 1;
  for (int i = 0; i < this->column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->column(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db_row)
}

::google::protobuf::uint8* db_row::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_row)
  // repeated .db_row_value column = 1;
  for (int i = 0; i < this->column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->column(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_row)
  return target;
}

int db_row::ByteSize() const {
  int total_size = 0;

  // repeated .db_row_value column = 1;
  total_size += 1 * this->column_size();
  for (int i = 0; i < this->column_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->column(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_row::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_row* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_row*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_row::MergeFrom(const db_row& from) {
  GOOGLE_CHECK_NE(&from, this);
  column_.MergeFrom(from.column_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_row::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_row::CopyFrom(const db_row& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_row::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->column())) return false;
  return true;
}

void db_row::Swap(db_row* other) {
  if (other != this) {
    column_.Swap(&other->column_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_row::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_row_descriptor_;
  metadata.reflection = db_row_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_rows::kRowsFieldNumber;
#endif  // !_MSC_VER

db_rows::db_rows()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db_rows)
}

void db_rows::InitAsDefaultInstance() {
}

db_rows::db_rows(const db_rows& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db_rows)
}

void db_rows::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_rows::~db_rows() {
  // @@protoc_insertion_point(destructor:db_rows)
  SharedDtor();
}

void db_rows::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_rows::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_rows::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_rows_descriptor_;
}

const db_rows& db_rows::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fquery_2eproto();
  return *default_instance_;
}

db_rows* db_rows::default_instance_ = NULL;

db_rows* db_rows::New() const {
  return new db_rows;
}

void db_rows::Clear() {
  rows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_rows::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db_rows)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db_row rows = 1;
      case 1: {
        if (tag == 10) {
         parse_rows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rows;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db_rows)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db_rows)
  return false;
#undef DO_
}

void db_rows::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db_rows)
  // repeated .db_row rows = 1;
  for (int i = 0; i < this->rows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rows(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db_rows)
}

::google::protobuf::uint8* db_rows::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_rows)
  // repeated .db_row rows = 1;
  for (int i = 0; i < this->rows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rows(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_rows)
  return target;
}

int db_rows::ByteSize() const {
  int total_size = 0;

  // repeated .db_row rows = 1;
  total_size += 1 * this->rows_size();
  for (int i = 0; i < this->rows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rows(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_rows::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_rows* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_rows*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_rows::MergeFrom(const db_rows& from) {
  GOOGLE_CHECK_NE(&from, this);
  rows_.MergeFrom(from.rows_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_rows::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_rows::CopyFrom(const db_rows& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_rows::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->rows())) return false;
  return true;
}

void db_rows::Swap(db_rows* other) {
  if (other != this) {
    rows_.Swap(&other->rows_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_rows::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_rows_descriptor_;
  metadata.reflection = db_rows_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_error::kIsMysqlErrorFieldNumber;
const int db_error::kErrorCodeFieldNumber;
const int db_error::kReasonFieldNumber;
#endif  // !_MSC_VER

db_error::db_error()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db_error)
}

void db_error::InitAsDefaultInstance() {
}

db_error::db_error(const db_error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db_error)
}

void db_error::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  is_mysql_error_ = false;
  error_code_ = 0;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_error::~db_error() {
  // @@protoc_insertion_point(destructor:db_error)
  SharedDtor();
}

void db_error::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void db_error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_error_descriptor_;
}

const db_error& db_error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fquery_2eproto();
  return *default_instance_;
}

db_error* db_error::default_instance_ = NULL;

db_error* db_error::New() const {
  return new db_error;
}

void db_error::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<db_error*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(is_mysql_error_, error_code_);
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db_error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_mysql_error = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_mysql_error_)));
          set_has_is_mysql_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // required int32 error_code = 2;
      case 2: {
        if (tag == 16) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reason;
        break;
      }

      // required string reason = 3;
      case 3: {
        if (tag == 26) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db_error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db_error)
  return false;
#undef DO_
}

void db_error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db_error)
  // required bool is_mysql_error = 1;
  if (has_is_mysql_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_mysql_error(), output);
  }

  // required int32 error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  // required string reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db_error)
}

::google::protobuf::uint8* db_error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_error)
  // required bool is_mysql_error = 1;
  if (has_is_mysql_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_mysql_error(), target);
  }

  // required int32 error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }

  // required string reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_error)
  return target;
}

int db_error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_mysql_error = 1;
    if (has_is_mysql_error()) {
      total_size += 1 + 1;
    }

    // required int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // required string reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_error::MergeFrom(const db_error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_mysql_error()) {
      set_is_mysql_error(from.is_mysql_error());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_error::CopyFrom(const db_error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_error::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void db_error::Swap(db_error* other) {
  if (other != this) {
    std::swap(is_mysql_error_, other->is_mysql_error_);
    std::swap(error_code_, other->error_code_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_error_descriptor_;
  metadata.reflection = db_error_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_result::kFieldsFieldNumber;
const int db_query_result::kAffectedRowsFieldNumber;
const int db_query_result::kRowsFieldNumber;
const int db_query_result::kSuccessFieldNumber;
const int db_query_result::kErrorFieldNumber;
#endif  // !_MSC_VER

db_query_result::db_query_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db_query_result)
}

void db_query_result::InitAsDefaultInstance() {
  fields_ = const_cast< ::db_fields*>(&::db_fields::default_instance());
  rows_ = const_cast< ::db_rows*>(&::db_rows::default_instance());
  error_ = const_cast< ::db_error*>(&::db_error::default_instance());
}

db_query_result::db_query_result(const db_query_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db_query_result)
}

void db_query_result::SharedCtor() {
  _cached_size_ = 0;
  fields_ = NULL;
  affected_rows_ = GOOGLE_ULONGLONG(0);
  rows_ = NULL;
  success_ = false;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_result::~db_query_result() {
  // @@protoc_insertion_point(destructor:db_query_result)
  SharedDtor();
}

void db_query_result::SharedDtor() {
  if (this != default_instance_) {
    delete fields_;
    delete rows_;
    delete error_;
  }
}

void db_query_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_result_descriptor_;
}

const db_query_result& db_query_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fquery_2eproto();
  return *default_instance_;
}

db_query_result* db_query_result::default_instance_ = NULL;

db_query_result* db_query_result::New() const {
  return new db_query_result;
}

void db_query_result::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_fields()) {
      if (fields_ != NULL) fields_->::db_fields::Clear();
    }
    affected_rows_ = GOOGLE_ULONGLONG(0);
    if (has_rows()) {
      if (rows_ != NULL) rows_->::db_rows::Clear();
    }
    success_ = false;
    if (has_error()) {
      if (error_ != NULL) error_->::db_error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db_query_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .db_fields fields = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fields()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_affected_rows;
        break;
      }

      // optional uint64 affected_rows = 2;
      case 2: {
        if (tag == 16) {
         parse_affected_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &affected_rows_)));
          set_has_affected_rows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rows;
        break;
      }

      // optional .db_rows rows = 3;
      case 3: {
        if (tag == 26) {
         parse_rows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rows()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_success;
        break;
      }

      // required bool success = 4;
      case 4: {
        if (tag == 32) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_error;
        break;
      }

      // optional .db_error error = 5;
      case 5: {
        if (tag == 42) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db_query_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db_query_result)
  return false;
#undef DO_
}

void db_query_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db_query_result)
  // optional .db_fields fields = 1;
  if (has_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fields(), output);
  }

  // optional uint64 affected_rows = 2;
  if (has_affected_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->affected_rows(), output);
  }

  // optional .db_rows rows = 3;
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rows(), output);
  }

  // required bool success = 4;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  // optional .db_error error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db_query_result)
}

::google::protobuf::uint8* db_query_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_query_result)
  // optional .db_fields fields = 1;
  if (has_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fields(), target);
  }

  // optional uint64 affected_rows = 2;
  if (has_affected_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->affected_rows(), target);
  }

  // optional .db_rows rows = 3;
  if (has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rows(), target);
  }

  // required bool success = 4;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  // optional .db_error error = 5;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_query_result)
  return target;
}

int db_query_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .db_fields fields = 1;
    if (has_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fields());
    }

    // optional uint64 affected_rows = 2;
    if (has_affected_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->affected_rows());
    }

    // optional .db_rows rows = 3;
    if (has_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rows());
    }

    // required bool success = 4;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional .db_error error = 5;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_result::MergeFrom(const db_query_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fields()) {
      mutable_fields()->::db_fields::MergeFrom(from.fields());
    }
    if (from.has_affected_rows()) {
      set_affected_rows(from.affected_rows());
    }
    if (from.has_rows()) {
      mutable_rows()->::db_rows::MergeFrom(from.rows());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_error()) {
      mutable_error()->::db_error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_result::CopyFrom(const db_query_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  if (has_fields()) {
    if (!this->fields().IsInitialized()) return false;
  }
  if (has_rows()) {
    if (!this->rows().IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void db_query_result::Swap(db_query_result* other) {
  if (other != this) {
    std::swap(fields_, other->fields_);
    std::swap(affected_rows_, other->affected_rows_);
    std::swap(rows_, other->rows_);
    std::swap(success_, other->success_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_result_descriptor_;
  metadata.reflection = db_query_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
