// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agent_servers.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "agent_servers.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* agent_server_node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  agent_server_node_reflection_ = NULL;
const ::google::protobuf::Descriptor* agent_servers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  agent_servers_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_agent_5fservers_2eproto() {
  protobuf_AddDesc_agent_5fservers_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "agent_servers.proto");
  GOOGLE_CHECK(file != NULL);
  agent_server_node_descriptor_ = file->message_type(0);
  static const int agent_server_node_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_server_node, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_server_node, is_pipe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_server_node, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_server_node, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_server_node, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_server_node, need_login_),
  };
  agent_server_node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      agent_server_node_descriptor_,
      agent_server_node::default_instance_,
      agent_server_node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_server_node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_server_node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(agent_server_node));
  agent_servers_descriptor_ = file->message_type(1);
  static const int agent_servers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_servers, servers_),
  };
  agent_servers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      agent_servers_descriptor_,
      agent_servers::default_instance_,
      agent_servers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_servers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_servers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(agent_servers));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_agent_5fservers_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    agent_server_node_descriptor_, &agent_server_node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    agent_servers_descriptor_, &agent_servers::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_agent_5fservers_2eproto() {
  delete agent_server_node::default_instance_;
  delete agent_server_node_reflection_;
  delete agent_servers::default_instance_;
  delete agent_servers_reflection_;
}

void protobuf_AddDesc_agent_5fservers_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023agent_servers.proto\"\206\001\n\021agent_server_n"
    "ode\022\023\n\013server_name\030\001 \002(\t\022\017\n\007is_pipe\030\002 \002("
    "\010\022\017\n\007address\030\003 \002(\t\022\014\n\004port\030\004 \002(\005\022\021\n\tserv"
    "er_id\030\005 \002(\005\022\031\n\nneed_login\030\006 \002(\010:\005false\"4"
    "\n\ragent_servers\022#\n\007servers\030\001 \003(\0132\022.agent"
    "_server_node", 212);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "agent_servers.proto", &protobuf_RegisterTypes);
  agent_server_node::default_instance_ = new agent_server_node();
  agent_servers::default_instance_ = new agent_servers();
  agent_server_node::default_instance_->InitAsDefaultInstance();
  agent_servers::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_agent_5fservers_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_agent_5fservers_2eproto {
  StaticDescriptorInitializer_agent_5fservers_2eproto() {
    protobuf_AddDesc_agent_5fservers_2eproto();
  }
} static_descriptor_initializer_agent_5fservers_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int agent_server_node::kServerNameFieldNumber;
const int agent_server_node::kIsPipeFieldNumber;
const int agent_server_node::kAddressFieldNumber;
const int agent_server_node::kPortFieldNumber;
const int agent_server_node::kServerIdFieldNumber;
const int agent_server_node::kNeedLoginFieldNumber;
#endif  // !_MSC_VER

agent_server_node::agent_server_node()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent_server_node)
}

void agent_server_node::InitAsDefaultInstance() {
}

agent_server_node::agent_server_node(const agent_server_node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent_server_node)
}

void agent_server_node::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_pipe_ = false;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  server_id_ = 0;
  need_login_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

agent_server_node::~agent_server_node() {
  // @@protoc_insertion_point(destructor:agent_server_node)
  SharedDtor();
}

void agent_server_node::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_name_;
  }
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void agent_server_node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* agent_server_node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return agent_server_node_descriptor_;
}

const agent_server_node& agent_server_node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_agent_5fservers_2eproto();
  return *default_instance_;
}

agent_server_node* agent_server_node::default_instance_ = NULL;

agent_server_node* agent_server_node::New() const {
  return new agent_server_node;
}

void agent_server_node::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<agent_server_node*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(port_, server_id_);
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        server_name_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        address_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool agent_server_node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent_server_node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string server_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "server_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_pipe;
        break;
      }

      // required bool is_pipe = 2;
      case 2: {
        if (tag == 16) {
         parse_is_pipe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pipe_)));
          set_has_is_pipe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_address;
        break;
      }

      // required string address = 3;
      case 3: {
        if (tag == 26) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // required int32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_server_id;
        break;
      }

      // required int32 server_id = 5;
      case 5: {
        if (tag == 40) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_need_login;
        break;
      }

      // required bool need_login = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_need_login:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_login_)));
          set_has_need_login();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent_server_node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent_server_node)
  return false;
#undef DO_
}

void agent_server_node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent_server_node)
  // required string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->server_name(), output);
  }

  // required bool is_pipe = 2;
  if (has_is_pipe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_pipe(), output);
  }

  // required string address = 3;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->address(), output);
  }

  // required int32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // required int32 server_id = 5;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->server_id(), output);
  }

  // required bool need_login = 6 [default = false];
  if (has_need_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->need_login(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent_server_node)
}

::google::protobuf::uint8* agent_server_node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent_server_node)
  // required string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_name(), target);
  }

  // required bool is_pipe = 2;
  if (has_is_pipe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_pipe(), target);
  }

  // required string address = 3;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->address(), target);
  }

  // required int32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  // required int32 server_id = 5;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->server_id(), target);
  }

  // required bool need_login = 6 [default = false];
  if (has_need_login()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->need_login(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent_server_node)
  return target;
}

int agent_server_node::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string server_name = 1;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // required bool is_pipe = 2;
    if (has_is_pipe()) {
      total_size += 1 + 1;
    }

    // required string address = 3;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // required int32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // required int32 server_id = 5;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // required bool need_login = 6 [default = false];
    if (has_need_login()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void agent_server_node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const agent_server_node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const agent_server_node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void agent_server_node::MergeFrom(const agent_server_node& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_is_pipe()) {
      set_is_pipe(from.is_pipe());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_need_login()) {
      set_need_login(from.need_login());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void agent_server_node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void agent_server_node::CopyFrom(const agent_server_node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool agent_server_node::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void agent_server_node::Swap(agent_server_node* other) {
  if (other != this) {
    std::swap(server_name_, other->server_name_);
    std::swap(is_pipe_, other->is_pipe_);
    std::swap(address_, other->address_);
    std::swap(port_, other->port_);
    std::swap(server_id_, other->server_id_);
    std::swap(need_login_, other->need_login_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata agent_server_node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = agent_server_node_descriptor_;
  metadata.reflection = agent_server_node_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int agent_servers::kServersFieldNumber;
#endif  // !_MSC_VER

agent_servers::agent_servers()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent_servers)
}

void agent_servers::InitAsDefaultInstance() {
}

agent_servers::agent_servers(const agent_servers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent_servers)
}

void agent_servers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

agent_servers::~agent_servers() {
  // @@protoc_insertion_point(destructor:agent_servers)
  SharedDtor();
}

void agent_servers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void agent_servers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* agent_servers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return agent_servers_descriptor_;
}

const agent_servers& agent_servers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_agent_5fservers_2eproto();
  return *default_instance_;
}

agent_servers* agent_servers::default_instance_ = NULL;

agent_servers* agent_servers::New() const {
  return new agent_servers;
}

void agent_servers::Clear() {
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool agent_servers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent_servers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .agent_server_node servers = 1;
      case 1: {
        if (tag == 10) {
         parse_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_servers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent_servers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent_servers)
  return false;
#undef DO_
}

void agent_servers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent_servers)
  // repeated .agent_server_node servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->servers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:agent_servers)
}

::google::protobuf::uint8* agent_servers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent_servers)
  // repeated .agent_server_node servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->servers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent_servers)
  return target;
}

int agent_servers::ByteSize() const {
  int total_size = 0;

  // repeated .agent_server_node servers = 1;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void agent_servers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const agent_servers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const agent_servers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void agent_servers::MergeFrom(const agent_servers& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_.MergeFrom(from.servers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void agent_servers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void agent_servers::CopyFrom(const agent_servers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool agent_servers::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->servers())) return false;
  return true;
}

void agent_servers::Swap(agent_servers* other) {
  if (other != this) {
    servers_.Swap(&other->servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata agent_servers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = agent_servers_descriptor_;
  metadata.reflection = agent_servers_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
