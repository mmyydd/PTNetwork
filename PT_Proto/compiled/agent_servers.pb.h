// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agent_servers.proto

#ifndef PROTOBUF_agent_5fservers_2eproto__INCLUDED
#define PROTOBUF_agent_5fservers_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_agent_5fservers_2eproto();
void protobuf_AssignDesc_agent_5fservers_2eproto();
void protobuf_ShutdownFile_agent_5fservers_2eproto();

class agent_server_node;
class agent_servers;

// ===================================================================

class agent_server_node : public ::google::protobuf::Message {
 public:
  agent_server_node();
  virtual ~agent_server_node();

  agent_server_node(const agent_server_node& from);

  inline agent_server_node& operator=(const agent_server_node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const agent_server_node& default_instance();

  void Swap(agent_server_node* other);

  // implements Message ----------------------------------------------

  agent_server_node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const agent_server_node& from);
  void MergeFrom(const agent_server_node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string server_name = 1;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 1;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  inline void set_allocated_server_name(::std::string* server_name);

  // required bool is_pipe = 2;
  inline bool has_is_pipe() const;
  inline void clear_is_pipe();
  static const int kIsPipeFieldNumber = 2;
  inline bool is_pipe() const;
  inline void set_is_pipe(bool value);

  // required string address = 3;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 3;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // required int32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // required int32 server_id = 5;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 5;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);

  // required bool need_login = 6 [default = false];
  inline bool has_need_login() const;
  inline void clear_need_login();
  static const int kNeedLoginFieldNumber = 6;
  inline bool need_login() const;
  inline void set_need_login(bool value);

  // @@protoc_insertion_point(class_scope:agent_server_node)
 private:
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_is_pipe();
  inline void clear_has_is_pipe();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_need_login();
  inline void clear_has_need_login();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* server_name_;
  ::std::string* address_;
  ::google::protobuf::int32 port_;
  bool is_pipe_;
  bool need_login_;
  ::google::protobuf::int32 server_id_;
  friend void  protobuf_AddDesc_agent_5fservers_2eproto();
  friend void protobuf_AssignDesc_agent_5fservers_2eproto();
  friend void protobuf_ShutdownFile_agent_5fservers_2eproto();

  void InitAsDefaultInstance();
  static agent_server_node* default_instance_;
};
// -------------------------------------------------------------------

class agent_servers : public ::google::protobuf::Message {
 public:
  agent_servers();
  virtual ~agent_servers();

  agent_servers(const agent_servers& from);

  inline agent_servers& operator=(const agent_servers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const agent_servers& default_instance();

  void Swap(agent_servers* other);

  // implements Message ----------------------------------------------

  agent_servers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const agent_servers& from);
  void MergeFrom(const agent_servers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .agent_server_node servers = 1;
  inline int servers_size() const;
  inline void clear_servers();
  static const int kServersFieldNumber = 1;
  inline const ::agent_server_node& servers(int index) const;
  inline ::agent_server_node* mutable_servers(int index);
  inline ::agent_server_node* add_servers();
  inline const ::google::protobuf::RepeatedPtrField< ::agent_server_node >&
      servers() const;
  inline ::google::protobuf::RepeatedPtrField< ::agent_server_node >*
      mutable_servers();

  // @@protoc_insertion_point(class_scope:agent_servers)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::agent_server_node > servers_;
  friend void  protobuf_AddDesc_agent_5fservers_2eproto();
  friend void protobuf_AssignDesc_agent_5fservers_2eproto();
  friend void protobuf_ShutdownFile_agent_5fservers_2eproto();

  void InitAsDefaultInstance();
  static agent_servers* default_instance_;
};
// ===================================================================


// ===================================================================

// agent_server_node

// required string server_name = 1;
inline bool agent_server_node::has_server_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void agent_server_node::set_has_server_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void agent_server_node::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void agent_server_node::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& agent_server_node::server_name() const {
  // @@protoc_insertion_point(field_get:agent_server_node.server_name)
  return *server_name_;
}
inline void agent_server_node::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
  // @@protoc_insertion_point(field_set:agent_server_node.server_name)
}
inline void agent_server_node::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:agent_server_node.server_name)
}
inline void agent_server_node::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:agent_server_node.server_name)
}
inline ::std::string* agent_server_node::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:agent_server_node.server_name)
  return server_name_;
}
inline ::std::string* agent_server_node::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void agent_server_node::set_allocated_server_name(::std::string* server_name) {
  if (server_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_name_;
  }
  if (server_name) {
    set_has_server_name();
    server_name_ = server_name;
  } else {
    clear_has_server_name();
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:agent_server_node.server_name)
}

// required bool is_pipe = 2;
inline bool agent_server_node::has_is_pipe() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void agent_server_node::set_has_is_pipe() {
  _has_bits_[0] |= 0x00000002u;
}
inline void agent_server_node::clear_has_is_pipe() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void agent_server_node::clear_is_pipe() {
  is_pipe_ = false;
  clear_has_is_pipe();
}
inline bool agent_server_node::is_pipe() const {
  // @@protoc_insertion_point(field_get:agent_server_node.is_pipe)
  return is_pipe_;
}
inline void agent_server_node::set_is_pipe(bool value) {
  set_has_is_pipe();
  is_pipe_ = value;
  // @@protoc_insertion_point(field_set:agent_server_node.is_pipe)
}

// required string address = 3;
inline bool agent_server_node::has_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void agent_server_node::set_has_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void agent_server_node::clear_has_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void agent_server_node::clear_address() {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& agent_server_node::address() const {
  // @@protoc_insertion_point(field_get:agent_server_node.address)
  return *address_;
}
inline void agent_server_node::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set:agent_server_node.address)
}
inline void agent_server_node::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set_char:agent_server_node.address)
}
inline void agent_server_node::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:agent_server_node.address)
}
inline ::std::string* agent_server_node::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:agent_server_node.address)
  return address_;
}
inline ::std::string* agent_server_node::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void agent_server_node::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:agent_server_node.address)
}

// required int32 port = 4;
inline bool agent_server_node::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void agent_server_node::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void agent_server_node::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void agent_server_node::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 agent_server_node::port() const {
  // @@protoc_insertion_point(field_get:agent_server_node.port)
  return port_;
}
inline void agent_server_node::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:agent_server_node.port)
}

// required int32 server_id = 5;
inline bool agent_server_node::has_server_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void agent_server_node::set_has_server_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void agent_server_node::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void agent_server_node::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 agent_server_node::server_id() const {
  // @@protoc_insertion_point(field_get:agent_server_node.server_id)
  return server_id_;
}
inline void agent_server_node::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:agent_server_node.server_id)
}

// required bool need_login = 6 [default = false];
inline bool agent_server_node::has_need_login() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void agent_server_node::set_has_need_login() {
  _has_bits_[0] |= 0x00000020u;
}
inline void agent_server_node::clear_has_need_login() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void agent_server_node::clear_need_login() {
  need_login_ = false;
  clear_has_need_login();
}
inline bool agent_server_node::need_login() const {
  // @@protoc_insertion_point(field_get:agent_server_node.need_login)
  return need_login_;
}
inline void agent_server_node::set_need_login(bool value) {
  set_has_need_login();
  need_login_ = value;
  // @@protoc_insertion_point(field_set:agent_server_node.need_login)
}

// -------------------------------------------------------------------

// agent_servers

// repeated .agent_server_node servers = 1;
inline int agent_servers::servers_size() const {
  return servers_.size();
}
inline void agent_servers::clear_servers() {
  servers_.Clear();
}
inline const ::agent_server_node& agent_servers::servers(int index) const {
  // @@protoc_insertion_point(field_get:agent_servers.servers)
  return servers_.Get(index);
}
inline ::agent_server_node* agent_servers::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:agent_servers.servers)
  return servers_.Mutable(index);
}
inline ::agent_server_node* agent_servers::add_servers() {
  // @@protoc_insertion_point(field_add:agent_servers.servers)
  return servers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::agent_server_node >&
agent_servers::servers() const {
  // @@protoc_insertion_point(field_list:agent_servers.servers)
  return servers_;
}
inline ::google::protobuf::RepeatedPtrField< ::agent_server_node >*
agent_servers::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:agent_servers.servers)
  return &servers_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_agent_5fservers_2eproto__INCLUDED
