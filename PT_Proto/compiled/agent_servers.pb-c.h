/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: agent_servers.proto */

#ifndef PROTOBUF_C_agent_5fservers_2eproto__INCLUDED
#define PROTOBUF_C_agent_5fservers_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _AgentServerNode AgentServerNode;
typedef struct _AgentServers AgentServers;


/* --- enums --- */


/* --- messages --- */

struct  _AgentServerNode
{
  ProtobufCMessage base;
  char *server_name;
  protobuf_c_boolean is_pipe;
  char *address;
  int32_t port;
  int32_t server_id;
  protobuf_c_boolean need_login;
};
#define AGENT_SERVER_NODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&agent_server_node__descriptor) \
    , NULL, 0, NULL, 0, 0, 0 }


struct  _AgentServers
{
  ProtobufCMessage base;
  size_t n_servers;
  AgentServerNode **servers;
};
#define AGENT_SERVERS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&agent_servers__descriptor) \
    , 0,NULL }


/* AgentServerNode methods */
void   agent_server_node__init
                     (AgentServerNode         *message);
size_t agent_server_node__get_packed_size
                     (const AgentServerNode   *message);
size_t agent_server_node__pack
                     (const AgentServerNode   *message,
                      uint8_t             *out);
size_t agent_server_node__pack_to_buffer
                     (const AgentServerNode   *message,
                      ProtobufCBuffer     *buffer);
AgentServerNode *
       agent_server_node__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   agent_server_node__free_unpacked
                     (AgentServerNode *message,
                      ProtobufCAllocator *allocator);
/* AgentServers methods */
void   agent_servers__init
                     (AgentServers         *message);
size_t agent_servers__get_packed_size
                     (const AgentServers   *message);
size_t agent_servers__pack
                     (const AgentServers   *message,
                      uint8_t             *out);
size_t agent_servers__pack_to_buffer
                     (const AgentServers   *message,
                      ProtobufCBuffer     *buffer);
AgentServers *
       agent_servers__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   agent_servers__free_unpacked
                     (AgentServers *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*AgentServerNode_Closure)
                 (const AgentServerNode *message,
                  void *closure_data);
typedef void (*AgentServers_Closure)
                 (const AgentServers *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor agent_server_node__descriptor;
extern const ProtobufCMessageDescriptor agent_servers__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_agent_5fservers_2eproto__INCLUDED */
