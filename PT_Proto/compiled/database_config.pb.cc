// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: database_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "database_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* database_node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  database_node_reflection_ = NULL;
const ::google::protobuf::Descriptor* database_config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  database_config_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_database_5fconfig_2eproto() {
  protobuf_AddDesc_database_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "database_config.proto");
  GOOGLE_CHECK(file != NULL);
  database_node_descriptor_ = file->message_type(0);
  static const int database_node_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(database_node, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(database_node, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(database_node, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(database_node, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(database_node, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(database_node, dbname_),
  };
  database_node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      database_node_descriptor_,
      database_node::default_instance_,
      database_node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(database_node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(database_node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(database_node));
  database_config_descriptor_ = file->message_type(1);
  static const int database_config_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(database_config, databases_),
  };
  database_config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      database_config_descriptor_,
      database_config::default_instance_,
      database_config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(database_config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(database_config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(database_config));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_database_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    database_node_descriptor_, &database_node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    database_config_descriptor_, &database_config::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_database_5fconfig_2eproto() {
  delete database_node::default_instance_;
  delete database_node_reflection_;
  delete database_config::default_instance_;
  delete database_config_reflection_;
}

void protobuf_AddDesc_database_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025database_config.proto\"p\n\rdatabase_node"
    "\022\014\n\004name\030\001 \002(\t\022\017\n\007address\030\002 \002(\t\022\014\n\004port\030"
    "\003 \002(\005\022\020\n\010username\030\004 \002(\t\022\020\n\010password\030\005 \002("
    "\t\022\016\n\006dbname\030\006 \002(\t\"4\n\017database_config\022!\n\t"
    "databases\030\001 \003(\0132\016.database_node", 191);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "database_config.proto", &protobuf_RegisterTypes);
  database_node::default_instance_ = new database_node();
  database_config::default_instance_ = new database_config();
  database_node::default_instance_->InitAsDefaultInstance();
  database_config::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_database_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_database_5fconfig_2eproto {
  StaticDescriptorInitializer_database_5fconfig_2eproto() {
    protobuf_AddDesc_database_5fconfig_2eproto();
  }
} static_descriptor_initializer_database_5fconfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int database_node::kNameFieldNumber;
const int database_node::kAddressFieldNumber;
const int database_node::kPortFieldNumber;
const int database_node::kUsernameFieldNumber;
const int database_node::kPasswordFieldNumber;
const int database_node::kDbnameFieldNumber;
#endif  // !_MSC_VER

database_node::database_node()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:database_node)
}

void database_node::InitAsDefaultInstance() {
}

database_node::database_node(const database_node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:database_node)
}

void database_node::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

database_node::~database_node() {
  // @@protoc_insertion_point(destructor:database_node)
  SharedDtor();
}

void database_node::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (dbname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbname_;
  }
  if (this != default_instance_) {
  }
}

void database_node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* database_node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return database_node_descriptor_;
}

const database_node& database_node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_database_5fconfig_2eproto();
  return *default_instance_;
}

database_node* database_node::default_instance_ = NULL;

database_node* database_node::New() const {
  return new database_node;
}

void database_node::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        address_->clear();
      }
    }
    port_ = 0;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    if (has_dbname()) {
      if (dbname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dbname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool database_node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:database_node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // required string address = 2;
      case 2: {
        if (tag == 18) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required int32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_username;
        break;
      }

      // required string username = 4;
      case 4: {
        if (tag == 34) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_password;
        break;
      }

      // required string password = 5;
      case 5: {
        if (tag == 42) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_dbname;
        break;
      }

      // required string dbname = 6;
      case 6: {
        if (tag == 50) {
         parse_dbname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dbname().data(), this->dbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:database_node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:database_node)
  return false;
#undef DO_
}

void database_node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:database_node)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  // required int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // required string username = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->username(), output);
  }

  // required string password = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->password(), output);
  }

  // required string dbname = 6;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->dbname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:database_node)
}

::google::protobuf::uint8* database_node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:database_node)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // required int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // required string username = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->username(), target);
  }

  // required string password = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password(), target);
  }

  // required string dbname = 6;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->dbname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:database_node)
  return target;
}

int database_node::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // required int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // required string username = 4;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string password = 5;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required string dbname = 6;
    if (has_dbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void database_node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const database_node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const database_node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void database_node::MergeFrom(const database_node& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_dbname()) {
      set_dbname(from.dbname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void database_node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void database_node::CopyFrom(const database_node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool database_node::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void database_node::Swap(database_node* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(address_, other->address_);
    std::swap(port_, other->port_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(dbname_, other->dbname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata database_node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = database_node_descriptor_;
  metadata.reflection = database_node_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int database_config::kDatabasesFieldNumber;
#endif  // !_MSC_VER

database_config::database_config()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:database_config)
}

void database_config::InitAsDefaultInstance() {
}

database_config::database_config(const database_config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:database_config)
}

void database_config::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

database_config::~database_config() {
  // @@protoc_insertion_point(destructor:database_config)
  SharedDtor();
}

void database_config::SharedDtor() {
  if (this != default_instance_) {
  }
}

void database_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* database_config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return database_config_descriptor_;
}

const database_config& database_config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_database_5fconfig_2eproto();
  return *default_instance_;
}

database_config* database_config::default_instance_ = NULL;

database_config* database_config::New() const {
  return new database_config;
}

void database_config::Clear() {
  databases_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool database_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:database_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .database_node databases = 1;
      case 1: {
        if (tag == 10) {
         parse_databases:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_databases()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_databases;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:database_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:database_config)
  return false;
#undef DO_
}

void database_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:database_config)
  // repeated .database_node databases = 1;
  for (int i = 0; i < this->databases_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->databases(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:database_config)
}

::google::protobuf::uint8* database_config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:database_config)
  // repeated .database_node databases = 1;
  for (int i = 0; i < this->databases_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->databases(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:database_config)
  return target;
}

int database_config::ByteSize() const {
  int total_size = 0;

  // repeated .database_node databases = 1;
  total_size += 1 * this->databases_size();
  for (int i = 0; i < this->databases_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->databases(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void database_config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const database_config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const database_config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void database_config::MergeFrom(const database_config& from) {
  GOOGLE_CHECK_NE(&from, this);
  databases_.MergeFrom(from.databases_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void database_config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void database_config::CopyFrom(const database_config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool database_config::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->databases())) return false;
  return true;
}

void database_config::Swap(database_config* other) {
  if (other != this) {
    databases_.Swap(&other->databases_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata database_config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = database_config_descriptor_;
  metadata.reflection = database_config_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
